<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
映射文件
namespace 指定接口的类全名
-->
<mapper namespace="com.jensen.case2.dao.UserMapper">
    <!--
        TODO:
            1.id="findAllResultMap" 的属性值和下面select标签的resultMap="findAllResultMap"属性值一致
            2.type="User" 表示接口方法
             List<User> findAll(@Param("startIndex") Integer startIndex, @Param("pageSize") Integer pageSize);
             的返回值类型，如果接口方法返回值类型是单列集合，这里书写泛型类型

    -->
    <resultMap id="findAllResultMap" type="User" autoMapping="true">
        <!-- 配置的是主表t_user和User实体类的主键关系   -->
        <!-- <id column="sql语句查询结果的主键字段名" property="实体类User的属性名"/>-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <!--
            TODO：配置角色 ：一个用户有多个角色。因此在User实体类中定义集合成员变量保存多个角色信息
             private Set<Role> roles = new HashSet<Role>(0); // 此用户对应的多个角色
             1.collection:表示一对多的配置
             2.property="roles"  ： 表示在User实体类中存储多个角色的容器名
             3.ofType="Role"：表示容器中存储数据的类型即容器泛型
        -->
        <collection property="roles" ofType="Role" autoMapping="true">
            <!-- 配置t_role表和Role实体类关系   -->
            <id column="rid" property="id"/>
        </collection>
    </resultMap>
    <!--
        查询语句
        id: 接口中方法的名字
        resultType：返回的实体类的类型，类全名
         List<User> findAll(@Param("startIndex") Integer startIndex, @Param("pageSize") Integer pageSize);
    -->
    <select id="findAll" resultMap="findAllResultMap">
        select u.*,r.id rid,r.name,r.keyword,r.description
        from (select * from t_user limit #{startIndex},#{pageSize}) u
                 inner join t_user_role ur
                 inner join t_role r
                            on u.id = ur.user_id and ur.role_id=r.id;
    </select>

    <!-- Count 查询 -->
    <select id="findCount" resultType="java.lang.Long">
        SELECT COUNT(*) FROM t_user;
    </select>

    <!-- 更新用户 -->
    <update id="update">
        UPDATE t_user
        SET username = #{username},
            password = #{password}
        WHERE id = #{id};
    </update>

    <!-- 删除用户角色关系 -->
    <delete id="deleteFromUserAndRoleTableByUID">
        DELETE FROM t_user_role WHERE user_id = #{id};
    </delete>

    <!--
        //TODO:添加数据，第二个参数存放的是多个角色id,需要使用动态sql遍历集合
       void addUIDAndRIDToUserAndRoleTable(@Param("uid") Integer id, @Param("roleIds") List<String> roleIds);
        假设当前用户id是3，角色id是1 2 3
        insert into t_user_role(user_id,role_id) values(3,1),(3,2),(3,3)
        遍历容器的标签：
            <foreach collection="遍历容器的名字" item="容器中每个元素的变量名" close="以什么结束"
                open="以什么开始" separator="foreach标签的文本中的数据的分隔符号">

            </foreach>
        TODO:
            注意啦：在mybatis中如果接口方法有多个参数，要求我们必须使用@Param注解修饰形参，然后在#{}中的属性@Param注解
            的属性值来取值
            void addUIDAndRIDToUserAndRoleTable(@Param("uid") Integer id, @Param("roleIds") List<String> roleIds);
            <foreach collection="roleIds" item="rid" separator=",">
                (#{uid},#{rid})
            </foreach>
            1. collection="roleIds" :属性值roleIds是接口方法形参@Param("roleIds")的属性值
            2. item="rid"rid表示存储roleIds集合中的每个元素 rid=1  2  3===>要求在foreach 标签文本中取值的时候#{rid}大括号中的
                    rid必须是item的属性值
            3.#{uid}：大括号中的uid是接口方法形参@Param("uid") Integer id注解Param的属性值
            insert into t_user_role(user_id,role_id) values(3,1),(3,2),(3,3)
    -->
    <insert id="addUIDAndRIDToUserAndRoleTable">
        insert into t_user_role(user_id,role_id) values
        <foreach collection="roleIds" item="rid" separator=",">
            (#{uid},#{rid})
        </foreach>
    </insert>
</mapper>